// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Friend {

namespace {

const ::google::protobuf::Descriptor* Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  Friend_descriptor_ = file->message_type(0);
  static const int Friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, password_),
  };
  Friend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Friend_descriptor_,
      Friend::default_instance_,
      Friend_offsets_,
      -1,
      -1,
      -1,
      sizeof(Friend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, _is_default_instance_));
  FriendList_descriptor_ = file->message_type(1);
  static const int FriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, friend__),
  };
  FriendList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendList_descriptor_,
      FriendList::default_instance_,
      FriendList_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Friend_descriptor_, &Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendList_descriptor_, &FriendList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete Friend::default_instance_;
  delete Friend_reflection_;
  delete FriendList::default_instance_;
  delete FriendList_reflection_;
}

void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\006Friend\"8\n\006Friend\022\016\n\006frie"
    "nd\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\020\n\010password\030\003 \001(\014"
    "\",\n\nFriendList\022\036\n\006friend\030\001 \003(\0132\016.Friend."
    "Friendb\006proto3", 134);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  Friend::default_instance_ = new Friend();
  FriendList::default_instance_ = new FriendList();
  Friend::default_instance_->InitAsDefaultInstance();
  FriendList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friend::kFriendFieldNumber;
const int Friend::kNameFieldNumber;
const int Friend::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friend::Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Friend.Friend)
}

void Friend::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Friend::Friend(const Friend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Friend.Friend)
}

void Friend::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  friend__ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:Friend.Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_descriptor_;
}

const Friend& Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

Friend* Friend::default_instance_ = NULL;

Friend* Friend::New(::google::protobuf::Arena* arena) const {
  Friend* n = new Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Friend::Clear() {
  friend__ = GOOGLE_ULONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Friend.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional bytes password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Friend.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Friend.Friend)
  return false;
#undef DO_
}

void Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Friend.Friend)
  // optional uint64 friend = 1;
  if (this->friend_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_(), output);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:Friend.Friend)
}

::google::protobuf::uint8* Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Friend.Friend)
  // optional uint64 friend = 1;
  if (this->friend_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_(), target);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes password = 3;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Friend.Friend)
  return target;
}

int Friend::ByteSize() const {
  int total_size = 0;

  // optional uint64 friend = 1;
  if (this->friend_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->friend_());
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional bytes password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Friend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Friend>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.friend_() != 0) {
    set_friend_(from.friend_());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend::IsInitialized() const {

  return true;
}

void Friend::Swap(Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friend::InternalSwap(Friend* other) {
  std::swap(friend__, other->friend__);
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_descriptor_;
  metadata.reflection = Friend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Friend

// optional uint64 friend = 1;
void Friend::clear_friend_() {
  friend__ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Friend::friend_() const {
  // @@protoc_insertion_point(field_get:Friend.Friend.friend)
  return friend__;
}
 void Friend::set_friend_(::google::protobuf::uint64 value) {
  
  friend__ = value;
  // @@protoc_insertion_point(field_set:Friend.Friend.friend)
}

// optional bytes name = 2;
void Friend::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Friend::name() const {
  // @@protoc_insertion_point(field_get:Friend.Friend.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Friend::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Friend.Friend.name)
}
 void Friend::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Friend.Friend.name)
}
 void Friend::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Friend.Friend.name)
}
 ::std::string* Friend::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Friend.Friend.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Friend::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Friend::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Friend.Friend.name)
}

// optional bytes password = 3;
void Friend::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Friend::password() const {
  // @@protoc_insertion_point(field_get:Friend.Friend.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Friend::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Friend.Friend.password)
}
 void Friend::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Friend.Friend.password)
}
 void Friend::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Friend.Friend.password)
}
 ::std::string* Friend::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Friend.Friend.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Friend::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Friend::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Friend.Friend.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendList::kFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendList::FriendList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Friend.FriendList)
}

void FriendList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FriendList::FriendList(const FriendList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Friend.FriendList)
}

void FriendList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FriendList::~FriendList() {
  // @@protoc_insertion_point(destructor:Friend.FriendList)
  SharedDtor();
}

void FriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendList_descriptor_;
}

const FriendList& FriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendList* FriendList::default_instance_ = NULL;

FriendList* FriendList::New(::google::protobuf::Arena* arena) const {
  FriendList* n = new FriendList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendList::Clear() {
  friend__.Clear();
}

bool FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Friend.FriendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Friend.Friend friend = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friend_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_friend;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Friend.FriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Friend.FriendList)
  return false;
#undef DO_
}

void FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Friend.FriendList)
  // repeated .Friend.Friend friend = 1;
  for (unsigned int i = 0, n = this->friend__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Friend.FriendList)
}

::google::protobuf::uint8* FriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Friend.FriendList)
  // repeated .Friend.Friend friend = 1;
  for (unsigned int i = 0, n = this->friend__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Friend.FriendList)
  return target;
}

int FriendList::ByteSize() const {
  int total_size = 0;

  // repeated .Friend.Friend friend = 1;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendList::MergeFrom(const FriendList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friend__.MergeFrom(from.friend__);
}

void FriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList::CopyFrom(const FriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList::IsInitialized() const {

  return true;
}

void FriendList::Swap(FriendList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendList::InternalSwap(FriendList* other) {
  friend__.UnsafeArenaSwap(&other->friend__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendList_descriptor_;
  metadata.reflection = FriendList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendList

// repeated .Friend.Friend friend = 1;
int FriendList::friend__size() const {
  return friend__.size();
}
void FriendList::clear_friend_() {
  friend__.Clear();
}
const ::Friend::Friend& FriendList::friend_(int index) const {
  // @@protoc_insertion_point(field_get:Friend.FriendList.friend)
  return friend__.Get(index);
}
::Friend::Friend* FriendList::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:Friend.FriendList.friend)
  return friend__.Mutable(index);
}
::Friend::Friend* FriendList::add_friend_() {
  // @@protoc_insertion_point(field_add:Friend.FriendList.friend)
  return friend__.Add();
}
::google::protobuf::RepeatedPtrField< ::Friend::Friend >*
FriendList::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:Friend.FriendList.friend)
  return &friend__;
}
const ::google::protobuf::RepeatedPtrField< ::Friend::Friend >&
FriendList::friend_() const {
  // @@protoc_insertion_point(field_list:Friend.FriendList.friend)
  return friend__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Friend

// @@protoc_insertion_point(global_scope)
